// üóÑÔ∏è Configura√ß√£o Supabase - Sistema Soropel
// Configura√ß√£o centralizada para toda a aplica√ß√£o

import { createClient } from '@supabase/supabase-js'

// üîß Configura√ß√µes do ambiente
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY
const isSupabaseEnabled = import.meta.env.VITE_ENABLE_SUPABASE === 'true'

// üõ°Ô∏è Valida√ß√£o das vari√°veis de ambiente
if (isSupabaseEnabled && (!supabaseUrl || !supabaseAnonKey)) {
  console.warn('üö® Supabase configurado mas vari√°veis de ambiente faltando!')
  console.warn('Verifique VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY no .env')
  console.warn('Sistema funcionar√° em modo offline')
}

// üöÄ Cliente Supabase configurado - s√≥ cria se vari√°veis existirem
export const supabase = (supabaseUrl && supabaseAnonKey) 
  ? createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'X-Client-Info': 'sistema-soropel@1.0.0'
    }
  }
})
  : null // Fallback se vari√°veis n√£o existirem

// üéØ Configura√ß√µes espec√≠ficas do sistema
export const config = {
  // üóÑÔ∏è Database
  database: {
    maxRetries: 3,
    timeout: 10000,
    realtime: true
  },
  
  // üìä Features habilitadas
  features: {
    supabase: isSupabaseEnabled,
    ocr: import.meta.env.VITE_ENABLE_OCR === 'true',
    notifications: import.meta.env.VITE_ENABLE_NOTIFICATIONS === 'true',
    analytics: import.meta.env.VITE_ENABLE_ANALYTICS === 'true'
  },
  
  // üîç Debug
  debug: import.meta.env.VITE_DEBUG_MODE === 'true',
  logLevel: import.meta.env.VITE_LOG_LEVEL || 'info',
  
  // üì± App
  app: {
    name: import.meta.env.VITE_APP_NAME || 'Sistema Soropel',
    version: import.meta.env.VITE_APP_VERSION || '1.0.0',
    environment: import.meta.env.VITE_APP_ENVIRONMENT || 'development'
  }
}

// üß™ Fun√ß√£o de teste de conex√£o
export const testSupabaseConnection = async () => {
  if (!isSupabaseEnabled || !supabase) {
    return { success: false, error: 'Supabase n√£o habilitado ou n√£o configurado' }
  }
  
  try {
    const { data, error } = await supabase.from('products').select('count').limit(1)
    
    if (error) {
      console.error('‚ùå Erro na conex√£o Supabase:', error)
      return { success: false, error: error.message }
    }
    
    // ‚úÖ Log removido para console limpo
    return { success: true, data }
  } catch (err) {
    console.error('‚ùå Erro inesperado:', err)
    return { success: false, error: 'Erro de conex√£o' }
  }
}

// üõ°Ô∏è Verifica√ß√£o de disponibilidade do Supabase
export const isSupabaseAvailable = (): boolean => {
  return Boolean(supabase && isSupabaseEnabled)
}

// üö® Erro padr√£o para Supabase indispon√≠vel
export const createSupabaseUnavailableError = () => {
  return {
    success: false,
    error: 'Supabase n√£o est√° dispon√≠vel. Verifique as vari√°veis de ambiente.',
    data: null
  }
}

// ‚úÖ Log de inicializa√ß√£o removido para console limpo

export default supabase